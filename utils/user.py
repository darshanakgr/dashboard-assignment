import os
import json
# import sys
from utils.config import Config
from db.user import User
from utils.environment import Env
from utils.agent import BerTSAgent
from db.db_connection import get_db


def count_votes():
    users = get_db().execute('SELECT id FROM user').fetchall()
    votes = [0] * 4

    for u in users:
        if user_exists(user_id=u[0]):
            user = load_user(user_id=u[0])
            votes[user.get_mode()] += 1 if user.get_vote() else 0

    return votes


def get_previous_votes():
    users = get_db().execute('SELECT id FROM user').fetchall()
    votes = []

    for u in users:
        if user_exists(user_id=u[0]):
            user = load_user(user_id=u[0])
            votes.append((user.get_mode(), 1 if user.get_vote() else 0))

    return votes


def create_user(user_id):
    user = User(user_id)  # add the preference into the User object
    user.generate_frequencies()
    user.generate_preferences()
    '''
    the task of the contextual bandit problem is to change the mode
    we need to pass in a mode that is generated by the model itself
    '''
    # env = Env(votes=get_previous_votes())
    # agent = BerTSAgent()
    # user_arm = agent.get_arm(env, env.counts, env.cum_rewards)
    # arm_ind = env.arms.index(user_arm)
    user.set_mode(Config.ALPHABETICAL)
    user.set_vote(None)

    save_user(user)
    return user


def user_to_dict(user):
    return {
        "user_id": user.get_user_id(),
        "vote": user.get_vote(),
        "mode": user.get_mode(),
        "frequencies": user.get_frequencies(),
        "preferences": user.get_preferences()
    }


def dict_to_user(user_dict):
    user = User(user_dict["user_id"])
    user.set_frequencies(user_dict["frequencies"])
    user.set_preferences(user_dict["preferences"])
    user.set_vote(user_dict["vote"])
    user.set_mode(user_dict["mode"])
    return user


def user_exists(user_id):
    return os.path.exists(os.path.join(Config.DATA_DIR, f"{user_id}.json"))


def save_user(user):
    if not os.path.exists(Config.DATA_DIR):
        os.mkdir(Config.DATA_DIR)

    with open(os.path.join(Config.DATA_DIR, f"{user.get_user_id()}.json"), "w") as output_file:
        json.dump(user_to_dict(user), output_file)
        output_file.flush()
        output_file.close()


def load_user(user_id):
    if user_exists(user_id):
        with open(os.path.join(Config.DATA_DIR, f"{user_id}.json")) as output_file:
            user = json.load(output_file)
            return dict_to_user(user)
    return None
